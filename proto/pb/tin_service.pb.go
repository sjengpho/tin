// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.11.4
// source: tin_service.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_tin_service_proto protoreflect.FileDescriptor

var file_tin_service_proto_rawDesc = []byte{
	0x0a, 0x11, 0x74, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x03, 0x74, 0x69, 0x6e, 0x1a, 0x13, 0x67, 0x6d, 0x61, 0x69, 0x6c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x74, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x32, 0xbf, 0x05, 0x0a, 0x0a, 0x54, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x47, 0x6d, 0x61, 0x69, 0x6c, 0x55, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x12, 0x17, 0x2e, 0x74, 0x69, 0x6e, 0x2e, 0x47, 0x6d, 0x61, 0x69, 0x6c, 0x55, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x74, 0x69,
	0x6e, 0x2e, 0x47, 0x6d, 0x61, 0x69, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x47, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x75,
	0x74, 0x68, 0x55, 0x52, 0x4c, 0x12, 0x18, 0x2e, 0x74, 0x69, 0x6e, 0x2e, 0x47, 0x6d, 0x61, 0x69,
	0x6c, 0x41, 0x75, 0x74, 0x68, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x74, 0x69, 0x6e, 0x2e, 0x47, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x55,
	0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x47, 0x6d,
	0x61, 0x69, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x2e, 0x74, 0x69,
	0x6e, 0x2e, 0x47, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x74, 0x69, 0x6e, 0x2e, 0x47, 0x6d, 0x61,
	0x69, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x74, 0x69, 0x6e, 0x2e, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x69, 0x6e, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x1a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x12, 0x1d, 0x2e, 0x74, 0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65,
	0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x74, 0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x47, 0x0a, 0x12, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x12, 0x17, 0x2e, 0x74, 0x69, 0x6e, 0x2e, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x74, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x15, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x61, 0x68, 0x72, 0x65, 0x6e,
	0x68, 0x65, 0x69, 0x74, 0x12, 0x17, 0x2e, 0x74, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x74, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x45, 0x53, 0x53, 0x49, 0x44,
	0x12, 0x11, 0x2e, 0x74, 0x69, 0x6e, 0x2e, 0x45, 0x53, 0x53, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x74, 0x69, 0x6e, 0x2e, 0x45, 0x53, 0x53, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x2e, 0x74, 0x69, 0x6e, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x74, 0x69,
	0x6e, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x2e,
	0x74, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x74, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_tin_service_proto_goTypes = []interface{}{
	(*GmailUnreadRequest)(nil),        // 0: tin.GmailUnreadRequest
	(*GmailAuthURLRequest)(nil),       // 1: tin.GmailAuthURLRequest
	(*GmailAuthCodeRequest)(nil),      // 2: tin.GmailAuthCodeRequest
	(*AvailableUpdatesRequest)(nil),   // 3: tin.AvailableUpdatesRequest
	(*InstalledPackagesRequest)(nil),  // 4: tin.InstalledPackagesRequest
	(*TemperatureRequest)(nil),        // 5: tin.TemperatureRequest
	(*ESSIDRequest)(nil),              // 6: tin.ESSIDRequest
	(*IPAddressRequest)(nil),          // 7: tin.IPAddressRequest
	(*ConfigRequest)(nil),             // 8: tin.ConfigRequest
	(*GmailUnreadResponse)(nil),       // 9: tin.GmailUnreadResponse
	(*GmailAuthURLResponse)(nil),      // 10: tin.GmailAuthURLResponse
	(*GmailAuthCodeResponse)(nil),     // 11: tin.GmailAuthCodeResponse
	(*AvailableUpdatesResponse)(nil),  // 12: tin.AvailableUpdatesResponse
	(*InstalledPackagesResponse)(nil), // 13: tin.InstalledPackagesResponse
	(*TemperatureResponse)(nil),       // 14: tin.TemperatureResponse
	(*ESSIDResponse)(nil),             // 15: tin.ESSIDResponse
	(*IPAddressResponse)(nil),         // 16: tin.IPAddressResponse
	(*ConfigResponse)(nil),            // 17: tin.ConfigResponse
}
var file_tin_service_proto_depIdxs = []int32{
	0,  // 0: tin.TinService.GmailUnread:input_type -> tin.GmailUnreadRequest
	1,  // 1: tin.TinService.GmailAuthURL:input_type -> tin.GmailAuthURLRequest
	2,  // 2: tin.TinService.GmailAuthCode:input_type -> tin.GmailAuthCodeRequest
	3,  // 3: tin.TinService.AvailableUpdates:input_type -> tin.AvailableUpdatesRequest
	4,  // 4: tin.TinService.InstalledPackagesSubscribe:input_type -> tin.InstalledPackagesRequest
	5,  // 5: tin.TinService.TemperatureCelsius:input_type -> tin.TemperatureRequest
	5,  // 6: tin.TinService.TemperatureFahrenheit:input_type -> tin.TemperatureRequest
	6,  // 7: tin.TinService.ESSID:input_type -> tin.ESSIDRequest
	7,  // 8: tin.TinService.IPAddress:input_type -> tin.IPAddressRequest
	8,  // 9: tin.TinService.Config:input_type -> tin.ConfigRequest
	9,  // 10: tin.TinService.GmailUnread:output_type -> tin.GmailUnreadResponse
	10, // 11: tin.TinService.GmailAuthURL:output_type -> tin.GmailAuthURLResponse
	11, // 12: tin.TinService.GmailAuthCode:output_type -> tin.GmailAuthCodeResponse
	12, // 13: tin.TinService.AvailableUpdates:output_type -> tin.AvailableUpdatesResponse
	13, // 14: tin.TinService.InstalledPackagesSubscribe:output_type -> tin.InstalledPackagesResponse
	14, // 15: tin.TinService.TemperatureCelsius:output_type -> tin.TemperatureResponse
	14, // 16: tin.TinService.TemperatureFahrenheit:output_type -> tin.TemperatureResponse
	15, // 17: tin.TinService.ESSID:output_type -> tin.ESSIDResponse
	16, // 18: tin.TinService.IPAddress:output_type -> tin.IPAddressResponse
	17, // 19: tin.TinService.Config:output_type -> tin.ConfigResponse
	10, // [10:20] is the sub-list for method output_type
	0,  // [0:10] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_tin_service_proto_init() }
func file_tin_service_proto_init() {
	if File_tin_service_proto != nil {
		return
	}
	file_gmail_message_proto_init()
	file_package_manager_message_proto_init()
	file_temperature_message_proto_init()
	file_network_message_proto_init()
	file_config_message_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tin_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tin_service_proto_goTypes,
		DependencyIndexes: file_tin_service_proto_depIdxs,
	}.Build()
	File_tin_service_proto = out.File
	file_tin_service_proto_rawDesc = nil
	file_tin_service_proto_goTypes = nil
	file_tin_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TinServiceClient is the client API for TinService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TinServiceClient interface {
	GmailUnread(ctx context.Context, in *GmailUnreadRequest, opts ...grpc.CallOption) (*GmailUnreadResponse, error)
	GmailAuthURL(ctx context.Context, in *GmailAuthURLRequest, opts ...grpc.CallOption) (*GmailAuthURLResponse, error)
	GmailAuthCode(ctx context.Context, in *GmailAuthCodeRequest, opts ...grpc.CallOption) (*GmailAuthCodeResponse, error)
	AvailableUpdates(ctx context.Context, in *AvailableUpdatesRequest, opts ...grpc.CallOption) (*AvailableUpdatesResponse, error)
	InstalledPackagesSubscribe(ctx context.Context, in *InstalledPackagesRequest, opts ...grpc.CallOption) (TinService_InstalledPackagesSubscribeClient, error)
	TemperatureCelsius(ctx context.Context, in *TemperatureRequest, opts ...grpc.CallOption) (*TemperatureResponse, error)
	TemperatureFahrenheit(ctx context.Context, in *TemperatureRequest, opts ...grpc.CallOption) (*TemperatureResponse, error)
	ESSID(ctx context.Context, in *ESSIDRequest, opts ...grpc.CallOption) (*ESSIDResponse, error)
	IPAddress(ctx context.Context, in *IPAddressRequest, opts ...grpc.CallOption) (*IPAddressResponse, error)
	Config(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
}

type tinServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTinServiceClient(cc grpc.ClientConnInterface) TinServiceClient {
	return &tinServiceClient{cc}
}

func (c *tinServiceClient) GmailUnread(ctx context.Context, in *GmailUnreadRequest, opts ...grpc.CallOption) (*GmailUnreadResponse, error) {
	out := new(GmailUnreadResponse)
	err := c.cc.Invoke(ctx, "/tin.TinService/GmailUnread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tinServiceClient) GmailAuthURL(ctx context.Context, in *GmailAuthURLRequest, opts ...grpc.CallOption) (*GmailAuthURLResponse, error) {
	out := new(GmailAuthURLResponse)
	err := c.cc.Invoke(ctx, "/tin.TinService/GmailAuthURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tinServiceClient) GmailAuthCode(ctx context.Context, in *GmailAuthCodeRequest, opts ...grpc.CallOption) (*GmailAuthCodeResponse, error) {
	out := new(GmailAuthCodeResponse)
	err := c.cc.Invoke(ctx, "/tin.TinService/GmailAuthCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tinServiceClient) AvailableUpdates(ctx context.Context, in *AvailableUpdatesRequest, opts ...grpc.CallOption) (*AvailableUpdatesResponse, error) {
	out := new(AvailableUpdatesResponse)
	err := c.cc.Invoke(ctx, "/tin.TinService/AvailableUpdates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tinServiceClient) InstalledPackagesSubscribe(ctx context.Context, in *InstalledPackagesRequest, opts ...grpc.CallOption) (TinService_InstalledPackagesSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TinService_serviceDesc.Streams[0], "/tin.TinService/InstalledPackagesSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tinServiceInstalledPackagesSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TinService_InstalledPackagesSubscribeClient interface {
	Recv() (*InstalledPackagesResponse, error)
	grpc.ClientStream
}

type tinServiceInstalledPackagesSubscribeClient struct {
	grpc.ClientStream
}

func (x *tinServiceInstalledPackagesSubscribeClient) Recv() (*InstalledPackagesResponse, error) {
	m := new(InstalledPackagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tinServiceClient) TemperatureCelsius(ctx context.Context, in *TemperatureRequest, opts ...grpc.CallOption) (*TemperatureResponse, error) {
	out := new(TemperatureResponse)
	err := c.cc.Invoke(ctx, "/tin.TinService/TemperatureCelsius", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tinServiceClient) TemperatureFahrenheit(ctx context.Context, in *TemperatureRequest, opts ...grpc.CallOption) (*TemperatureResponse, error) {
	out := new(TemperatureResponse)
	err := c.cc.Invoke(ctx, "/tin.TinService/TemperatureFahrenheit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tinServiceClient) ESSID(ctx context.Context, in *ESSIDRequest, opts ...grpc.CallOption) (*ESSIDResponse, error) {
	out := new(ESSIDResponse)
	err := c.cc.Invoke(ctx, "/tin.TinService/ESSID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tinServiceClient) IPAddress(ctx context.Context, in *IPAddressRequest, opts ...grpc.CallOption) (*IPAddressResponse, error) {
	out := new(IPAddressResponse)
	err := c.cc.Invoke(ctx, "/tin.TinService/IPAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tinServiceClient) Config(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, "/tin.TinService/Config", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TinServiceServer is the server API for TinService service.
type TinServiceServer interface {
	GmailUnread(context.Context, *GmailUnreadRequest) (*GmailUnreadResponse, error)
	GmailAuthURL(context.Context, *GmailAuthURLRequest) (*GmailAuthURLResponse, error)
	GmailAuthCode(context.Context, *GmailAuthCodeRequest) (*GmailAuthCodeResponse, error)
	AvailableUpdates(context.Context, *AvailableUpdatesRequest) (*AvailableUpdatesResponse, error)
	InstalledPackagesSubscribe(*InstalledPackagesRequest, TinService_InstalledPackagesSubscribeServer) error
	TemperatureCelsius(context.Context, *TemperatureRequest) (*TemperatureResponse, error)
	TemperatureFahrenheit(context.Context, *TemperatureRequest) (*TemperatureResponse, error)
	ESSID(context.Context, *ESSIDRequest) (*ESSIDResponse, error)
	IPAddress(context.Context, *IPAddressRequest) (*IPAddressResponse, error)
	Config(context.Context, *ConfigRequest) (*ConfigResponse, error)
}

// UnimplementedTinServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTinServiceServer struct {
}

func (*UnimplementedTinServiceServer) GmailUnread(context.Context, *GmailUnreadRequest) (*GmailUnreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GmailUnread not implemented")
}
func (*UnimplementedTinServiceServer) GmailAuthURL(context.Context, *GmailAuthURLRequest) (*GmailAuthURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GmailAuthURL not implemented")
}
func (*UnimplementedTinServiceServer) GmailAuthCode(context.Context, *GmailAuthCodeRequest) (*GmailAuthCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GmailAuthCode not implemented")
}
func (*UnimplementedTinServiceServer) AvailableUpdates(context.Context, *AvailableUpdatesRequest) (*AvailableUpdatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AvailableUpdates not implemented")
}
func (*UnimplementedTinServiceServer) InstalledPackagesSubscribe(*InstalledPackagesRequest, TinService_InstalledPackagesSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method InstalledPackagesSubscribe not implemented")
}
func (*UnimplementedTinServiceServer) TemperatureCelsius(context.Context, *TemperatureRequest) (*TemperatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TemperatureCelsius not implemented")
}
func (*UnimplementedTinServiceServer) TemperatureFahrenheit(context.Context, *TemperatureRequest) (*TemperatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TemperatureFahrenheit not implemented")
}
func (*UnimplementedTinServiceServer) ESSID(context.Context, *ESSIDRequest) (*ESSIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ESSID not implemented")
}
func (*UnimplementedTinServiceServer) IPAddress(context.Context, *IPAddressRequest) (*IPAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IPAddress not implemented")
}
func (*UnimplementedTinServiceServer) Config(context.Context, *ConfigRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Config not implemented")
}

func RegisterTinServiceServer(s *grpc.Server, srv TinServiceServer) {
	s.RegisterService(&_TinService_serviceDesc, srv)
}

func _TinService_GmailUnread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GmailUnreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinServiceServer).GmailUnread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tin.TinService/GmailUnread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinServiceServer).GmailUnread(ctx, req.(*GmailUnreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TinService_GmailAuthURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GmailAuthURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinServiceServer).GmailAuthURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tin.TinService/GmailAuthURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinServiceServer).GmailAuthURL(ctx, req.(*GmailAuthURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TinService_GmailAuthCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GmailAuthCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinServiceServer).GmailAuthCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tin.TinService/GmailAuthCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinServiceServer).GmailAuthCode(ctx, req.(*GmailAuthCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TinService_AvailableUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvailableUpdatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinServiceServer).AvailableUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tin.TinService/AvailableUpdates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinServiceServer).AvailableUpdates(ctx, req.(*AvailableUpdatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TinService_InstalledPackagesSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InstalledPackagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TinServiceServer).InstalledPackagesSubscribe(m, &tinServiceInstalledPackagesSubscribeServer{stream})
}

type TinService_InstalledPackagesSubscribeServer interface {
	Send(*InstalledPackagesResponse) error
	grpc.ServerStream
}

type tinServiceInstalledPackagesSubscribeServer struct {
	grpc.ServerStream
}

func (x *tinServiceInstalledPackagesSubscribeServer) Send(m *InstalledPackagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TinService_TemperatureCelsius_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemperatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinServiceServer).TemperatureCelsius(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tin.TinService/TemperatureCelsius",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinServiceServer).TemperatureCelsius(ctx, req.(*TemperatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TinService_TemperatureFahrenheit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemperatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinServiceServer).TemperatureFahrenheit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tin.TinService/TemperatureFahrenheit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinServiceServer).TemperatureFahrenheit(ctx, req.(*TemperatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TinService_ESSID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ESSIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinServiceServer).ESSID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tin.TinService/ESSID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinServiceServer).ESSID(ctx, req.(*ESSIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TinService_IPAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinServiceServer).IPAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tin.TinService/IPAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinServiceServer).IPAddress(ctx, req.(*IPAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TinService_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinServiceServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tin.TinService/Config",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinServiceServer).Config(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TinService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tin.TinService",
	HandlerType: (*TinServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GmailUnread",
			Handler:    _TinService_GmailUnread_Handler,
		},
		{
			MethodName: "GmailAuthURL",
			Handler:    _TinService_GmailAuthURL_Handler,
		},
		{
			MethodName: "GmailAuthCode",
			Handler:    _TinService_GmailAuthCode_Handler,
		},
		{
			MethodName: "AvailableUpdates",
			Handler:    _TinService_AvailableUpdates_Handler,
		},
		{
			MethodName: "TemperatureCelsius",
			Handler:    _TinService_TemperatureCelsius_Handler,
		},
		{
			MethodName: "TemperatureFahrenheit",
			Handler:    _TinService_TemperatureFahrenheit_Handler,
		},
		{
			MethodName: "ESSID",
			Handler:    _TinService_ESSID_Handler,
		},
		{
			MethodName: "IPAddress",
			Handler:    _TinService_IPAddress_Handler,
		},
		{
			MethodName: "Config",
			Handler:    _TinService_Config_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InstalledPackagesSubscribe",
			Handler:       _TinService_InstalledPackagesSubscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tin_service.proto",
}
